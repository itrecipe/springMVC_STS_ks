<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.ezen.ex02.mapper.CarMapper">

<!-- CDATA는 sql문 안에서 키워드 or 부호 등...을 사용가능 하도록 해주는 것이고, 
	id 속성은 CarMapper인터페이스의 추상메서드명이다. -->
<select id="getList" resultType="org.ezen.ex02.domain.CarVO">
	<![CDATA[select * from carrot_car where cno > 0 order by cno desc]]>
</select>

<!-- page 처리가 포함된 sql
	정렬 성능을 위해 힌트 사용 /*+INDEX_DESC(tbl_board pk_board)*/
	rownum사용 위해 인라인뷰를 사용,rownum은 1이 꼭 포함되게 조건 만든다.
	인라인뷰의 결과도 가상 view객체처럼 사용
	
	SELECT 문을 사용하여 bno, title, content, writer, regdate, updatedate 열을 선택한다.
	FROM 절에서 하위 쿼리를 사용합니다. 하위 쿼리는 테이블 carrot_car에서 데이터를 가가져오는데, rownum이라는 가상의 열을 추가합니다. rownum은 각 행의 일련번호를 의미합니다.
	하위 쿼리에서는 WHERE 절을 사용하여 rownum이 #{pageNum} * #{amount}보다 작거나 같은 행만 선택합니다. 이를 통해 원하는 페이지의 데이터 개수를 조절할 수 있습니다.
	최종 결과는 WHERE 절의 조건을 만족하는 행만 선택합니다. WHERE 절의 조건은 (#{pageNum} - 1) * #{amount}보다 큰 rownum을 가진 행들입니다. 이를 통해 페이징 처리를 구현합니다.
	resultType="org.ezen.ex02.domain.BoardVO"는 결과를 매핑할 자바 객체의 타입을 지정합니다. 결과가 BoardVO 클래스의 인스턴스로 매핑될 것을 의미합니다.
	이렇게 작성된 SQL 쿼리는 페이지 번호(pageNum)와 한 페이지당 출력할 데이터 개수(amount)를 입력받아 해당하는 페이지의 데이터를 조회합니다. 페이징 처리를 위한 로직이 내장되어 있어 효과적인 데이터 조회가 가능합니다. 
-->

<!-- getListWithPaging 페이징 쿼리 1 - 순번 꼬이는 문제 및 삭제시 더미 데이터 발생
<select id="getListWithPaging" resultType="org.ezen.ex02.domain.CarVO">
	<![CDATA[
		select cno, writer, title, content, regdate, updatedate
		from
		(
			select /* +INDEX_DESC(carrot_car pk_carrot_car) */
				rownum rn, cno, writer, title, content, regdate, updatedate
				from carrot_car
			where rownum <= #{pageNum} * #{amount}
		)
		where rn > (#{pageNum} -1) * #{amount}
	]]>
</select>
-->

<!-- getListWithPaging - 페이징 쿼리2 
getListWithPaging 쿼리: 페이징 처리를 통해 CarVO 객체 리스트를 반환하는 SQL 쿼리입니다.
resultType="org.ezen.ex02.domain.CarVO"로 설정하여 결과를 해당 클래스 타입으로 매핑합니다.
-->

<select id="getListWithPaging" resultType="org.ezen.ex02.domain.CarVO">

    <!-- CDATA 섹션: 쿼리의 내용을 무시하고 원본 그대로 포함시킵니다. -->
	<![CDATA[
		select cno, writer, title, content, regdate, updatedate
		from (
			-- 서브쿼리 시작: 페이징 처리를 위한 서브쿼리입니다. rownum을 활용하여 페이지별로 데이터를 추출합니다.
			select /* +INDEX_DESC(carrot_car pk_carrot_car) */
				rownum rn, cno, writer, title, content, regdate, updatedate
				from (
					-- 내부 서브쿼리 시작: 데이터를 정렬하여 가져오는 서브쿼리입니다.
					select cno, writer, title, content, regdate, updatedate
					from carrot_car
					order by cno desc -- cno 열을 내림차순으로 정렬합니다.
					-- 내부 서브쿼리 종료
				)
				where rownum <= #{pageNum} * #{amount} -- rownum이 페이지 * 개수보다 작거나 같은 데이터 선택
			-- 서브쿼리 종료
		)
		where rn > (#{pageNum} - 1) * #{amount} -- rownum이 (페이지 - 1) * 개수보다 큰 데이터 선택
	]]>
</select>

<!-- getListWithPaging 페이징 쿼리2 - 문제점 개선 코드
이 SQL 쿼리는 CarVO라는 클래스 타입의 리스트를 페이징 처리하여 반환합니다.
rownum을 활용한 서브쿼리를 사용하여 페이징 처리를 합니다. 이 서브쿼리는 정렬된 데이터를 기반으로 페이지마다 일정한 개수의 데이터를 선택합니다.
내부 서브쿼리는 carrot_car 테이블에서 데이터를 가져와 cno 열을 내림차순으로 정렬합니다.
외부 서브쿼리는 내부 서브쿼리에서 정렬된 데이터 중에서 rownum을 사용하여 원하는 페이지에 해당하는 데이터를 선택합니다.
#{pageNum}과 #{amount}는 MyBatis의 매개변수로, 페이지 번호와 한 페이지에 보여질 아이템 개수를 나타냅니다.
결과적으로, 해당 페이지에 해당하는 데이터만 추출하여 반환합니다.
총 페이지 수를 계산하려면 총 데이터 개수와 한 페이지에 보여질 아이템 개수를 이용하여 계산할 수 있습니다. 
위 코드에서 rn은 각 데이터의 행 번호(rownum)를 나타내며, 이를 통해 원하는 페이지의 데이터를 선택하게 됩니다.
-->

<!-- pk인 cno 값을 미리 알 필요가 없는 경우에 사용, insert(Create)만 수행한다. 
	PreaparedStatement를 사용, ? 바인딩 변수 대신 #{변수명}을 사용한다
	parameterType은 기본형, 문자열, 객체형일시에 생략이 가능하다.
-->
<insert id="insert">
insert into carrot_car(cno, writer, title, content, carName, carType, carYear, carPrice, carDate, fuel, disp, kilos, mission) 
values(car_seq.nextval, #{writer}, #{title}, #{content}, #{carName}, #{carType}, #{carYear}, #{carPrice}, #{carDate}, #{fuel}, #{disp}, #{kilos}, #{mission})
</insert>

<insert id="insertSelectKey">
	<selectKey keyProperty="cno" order="BEFORE" resultType="Long">
		select car_seq.nextval from dual
	</selectKey>
	
	insert into carrot_car(cno, writer, title, content, carName, carType, carYear, carPrice, carDate, fuel, disp, kilos, mission) 
	values(#{cno}, #{writer}, #{title}, #{content}, #{carName}, #{carType}, #{carYear}, #{carPrice}, #{carDate}, #{fuel}, #{disp}, #{kilos}, #{mission})
</insert>

<select id="read" resultType="org.ezen.ex02.domain.CarVO">
	select * from carrot_car where cno = #{cno}
</select>

<update id="update">
	update carrot_car
	set writer = #{writer}, 
		title = #{title},
		content = #{content},
		updateDate = sysdate,
		carName = #{carName},
		carType = #{carType},
		carYear = #{carYear},
		carPrice = #{carPrice},
		carDate = #{carDate},
		fuel = #{fuel},
		disp = #{disp},
 		kilos = #{kilos},
		mission = #{mission}
	where cno = #{cno}
</update>

<delete id="delete">
	delete carrot_car where cno = #{cno}
</delete>

<!-- getTotalCount : 검색처리 전 -->
<select id="getTotalCount" resultType="int">
	select count(*) from carrot_car where cno > 0
</select>

</mapper>